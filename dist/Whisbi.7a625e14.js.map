{"version":3,"sources":["js/UserControl.js","js/handleUser.js","index.js"],"names":["userControl","constructor","username","repoNumber","repos","userId","getUserData","toggleLoader","response","fetch","method","apiData","json","public_repos","id","err","document","querySelector","innerHTML","getUserRepos","classList","toggle","getRepoNumber","getRepos","getUserName","getUserId","handleUser","results","message","createUserControl","UserControl","repoList","div","createElement","p","add","appendChild","repo","a","href","html_url","innerText","name","style","visibility","images","querySelectorAll","dotContainer","index","image","entries","span","className","dataset","dots","dot","addEventListener","scrollIntoView","behavior","block","inline","forEach","remove","event","preventDefault","target","contains","value"],"mappings":"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","file":"Whisbi.7a625e14.js","sourceRoot":"..","sourcesContent":["//Class will handle all actions after username is input: retrieveng user data and repo data from the API to be used by handleUser\r\nexport default class userControl {\r\n\r\n    constructor(username) {\r\n        this.username = username;\r\n        this.repoNumber = 0;\r\n        this.repos = [];\r\n        this.userId;\r\n    }\r\n\r\n    async getUserData() {\r\n        this.toggleLoader();\r\n        try {\r\n            const response = await fetch(`https://api.github.com/users/${this.username}`, { method: 'GET'});\r\n            const apiData = await response.json();\r\n            this.repoNumber = apiData.public_repos;\r\n            this.userId = apiData.id;\r\n          } catch (err) {\r\n            this.toggleLoader();\r\n            const message = document.querySelector(\".card .message\");\r\n            message.innerHTML = \"<p class='error'>There was an error obtaining the data from the server. Please try again!<p>\"\r\n          }\r\n    }\r\n\r\n    async getUserRepos() {\r\n        this.toggleLoader();\r\n        try {\r\n            const response = await fetch(`https://api.github.com/users/${this.username}/repos`, { method: 'GET'});\r\n            const apiData = await response.json();\r\n            this.repos = [...apiData];\r\n          } catch (err) {\r\n            this.toggleLoader();\r\n            const message = document.querySelector(\".card .message\");\r\n            message.innerHTML = \"<p class='error'>There was an error obtaining the data from the server. Please try again!<p>\"\r\n          }\r\n    }\r\n\r\n    toggleLoader() {\r\n        document.querySelector(\".container i\").classList.toggle(\"active\");\r\n        document.querySelector(\".send\").classList.toggle(\"inactive\");\r\n    }\r\n\r\n    getRepoNumber() {\r\n        return this.repoNumber;\r\n    }\r\n\r\n    getRepos() {\r\n        return this.repos;\r\n    }\r\n\r\n    getUserName() {\r\n        return this.username;\r\n    }\r\n\r\n    getUserId() {\r\n        return this.userId;\r\n    }    \r\n}","import UserControl from './UserControl'\r\n\r\n//Function that takes care of handling the UserControl class and injects the results in the DOM\r\nexport default async function handleUser(username) {\r\n    const results = document.querySelector(\".results-holder\");\r\n    const message = document.querySelector(\".card .message\");\r\n    const createUserControl = new UserControl(username);\r\n    await createUserControl.getUserData();\r\n\r\n    //Valid users have user ID, checking it first to search for repos\r\n    if (createUserControl.getUserId()) {\r\n        //Check public repo number, only show results if user has public repos.\r\n        //Here the results list is created and injected\r\n        if (createUserControl.getRepoNumber() > 0) {\r\n            await createUserControl.getUserRepos();\r\n            const repoList = createUserControl.getRepos();\r\n            const div = document.createElement('div');\r\n            const p = document.createElement('p');\r\n            p.innerHTML = `User ${createUserControl.getUserName()} has ${createUserControl.getRepoNumber()} ${(createUserControl.getRepoNumber() > 1) ? 'repositories' : 'repository'}`;\r\n            p.classList.add(\"description\");\r\n            div.classList.add(\"repo-grid\");\r\n            div.appendChild(p);\r\n            for (const repo in repoList) {\r\n                const a = document.createElement('a');\r\n                a.href = repoList[repo].html_url;\r\n                a.innerText = repoList[repo].name;\r\n                div.appendChild(a);\r\n            }\r\n            results.innerHTML = \"\";\r\n            results.appendChild(div);\r\n            results.style.visibility = \"visible\";\r\n        //If no public repos, show message\r\n        } else {\r\n            createUserControl.toggleLoader();\r\n            message.innerHTML = `<p class='error'>User ${createUserControl.getUserName()} doesn't have any public repositories</p>`;\r\n        }\r\n    //If no ID found, user doesnt exist\r\n    } else {\r\n        createUserControl.toggleLoader();\r\n        message.innerHTML = `<p class='error'>User ${createUserControl.getUserName()} was not found</p>`;\r\n    }\r\n    \r\n}","import handleUser from './js/handleUser'\r\n\r\n//Init function to set up slider and event listeners for the Git form\r\n(() => {\r\n    //Add control buttons depending on how many images are in the slider so only the picture tag has to be added in the HTML.\r\n    const images = [...document.querySelectorAll(\".slider picture\")];\r\n    const dotContainer = document.querySelector(\".slider-control\");\r\n    \r\n    for (const [index, image] of images.entries()) {\r\n        const span = document.createElement('span');\r\n        span.className = \"dot\";\r\n        if (index === 0) {\r\n            span.classList.add(\"active\");\r\n        }\r\n        span.dataset.id = index+1\r\n        image.dataset.id = index+1;\r\n        dotContainer.appendChild(span);\r\n    }\r\n\r\n    //Create event listeners for the dot buttons to scroll to image when clicked\r\n    const dots = document.querySelectorAll(\".slider-control .dot\");\r\n    for (const [index, dot] of dots.entries()) {\r\n        dot.addEventListener(\"click\", () => {\r\n            const targetImage = document.querySelector(`[data-id='${index+1}']`);\r\n            targetImage.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\r\n            dots.forEach((dot) => dot.classList.remove(\"active\"));\r\n            dot.classList.add(\"active\");\r\n        })\r\n    }\r\n\r\n    //Create event listener for Git username form\r\n    const form = document.querySelector(\".input-holder\");\r\n    form.addEventListener(\"submit\", (event) => {\r\n        event.preventDefault();\r\n        const message = document.querySelector(\".card .message\");\r\n        if(event.target.classList.contains(\"inactive\")) {\r\n            return;\r\n        }\r\n        const username = document.querySelector(\"#username\").value;\r\n        if (username) {\r\n            message.innerHTML = \"\";\r\n            handleUser(username);\r\n        } else {\r\n            message.innerHTML = \"<p class='error'>Please enter a username</p>\";\r\n        }\r\n    });\r\n})();"]}